What is abstraction? Flipgrid

Data Abstraction: is the property by virtue of which only the essential details are displayed to the user.
            The trivial or the non-essential units are not displayed to the user.

                Ex: A car is viewed as a car rather than its individual components.
                   : A Cell phone is viewed as cell phone not materials used to make the phone.etc..

            --> also be defined as the process of identifying only the required characteristics of an object
                      ignoring the irrelevant details. A real life example of that would be:

                      Ex: When turning turning a light switch, One only knows to flip the switch on
                            and the lights turn on.
                                However, is it known how the light switch operates to turn the lights on or off?
                                What is happening in the background to enable the switch to operate?
                                We only only that when we flip the switch the lights turn on or off.
                                But we don't know the details of how it happens.  Much like Data abstraction.

    ---> In Java,
            OOP Abstraction:
    		1. abstract classes
    		2. abstract methods
    		3. interfaces

        --> Abstract classes are created by using the abstract keyword
                 --> We can not create an object from an Abstract class..so this class can't be instantiated with a new operator.
                 --> Can have parameterized constructors and the default constructor is always present.

        --> Abstract methods are declared without implementation (in other words no body in the method)
                --> However, if an abstract method does have a body it will always have to be overridden in the subclass
                        or the subclass itself must be abstract as well.

        --> When declaring abstract methods the abstract keyword must be used



           --> All Interfaces are abstract so that it can't provide any code.
                --> So all methods in an Interface are abstract as well.

                    --> Makes Abstraction 100 % achieved by using Interfaces.


























