Flipgrid Q5: Static and Non-Static!
Flipgrid Q5: Please explain the static keyword in terms of usages with variables, methods and blocks in classes.


Static is a Custom class that can be declared with
        •  the static keyword
            ===> In Java static: the particular member belongs to a type itself,rather than to an instance of that type.
               ====>  static keyword applies to  variables, methods, class, block
        • Belongs to the class, and can be called through the class
        • When declaring something static it Creates only one copy of the static which is shared by all objects of the class
                ==> Therefore All the Objects of the class share that same copy

First I will discuss Static variables:

Static:
    • VARIABLES
           ====> do not depend on objects depends on the class
        - becomes a common property of all the objects
        - Since the Memory allocation happens only once in the class area when the class is loaded in the memory,
            static variables occupy less space in the memory
        -  Making only 1 copy of a classes' static variable and is shared by all the objects of the class
        - As a result:  if change is made to any static variables,  the other instances will be effected as well


                   And that is how static variables are used

In addition to variables ....

    • METHODS
        - methods can also be declared as static and are called using class name, without creating objects
        - When deciding whether to use a static method or instance method the question to ask is:
          Will the object have instance variables or methods?  If, yes then no need to declare a method static.
        - Keeping in mind that Objects can call static methods
        -  Static methods only accept static members

                    This is how static methods are most commonly used

Like variables and methods,

    • CLASS:
         ===>   can also be declared as static
        -  Static class can only be created as nested class (nested class is an Inner class that permits us to group
            classes that belong together making a code more readable and maintainable)
        - Since an Inner class can be static, it then allows access to it's members without creating objects
        - Signifying that a static class allows reusing the same elements without the need
            to instantiate the same object repeatedly.
            Whereas a Non-static class allows the data to be different but the operations to be the same.

And last but least,

    • BLOCK
        =====> can also be declared as static
        =====> AKA Static block or Static initializer Block
        - which is special block that contains a set of instructions that is only run once when a class is
            loaded into memory regardless of how many objects we have.
        - with this in mind a static bock is also the first block to run
        - if we have static variables that can't be assigned to a value when creating them
            then static block is the best to use in order to initialize those variables


**A Data type is one of the forms of a variable to which the value can be assigned of a given type only.
This value can be used throughout the program. A Data structure is a collection of data of different
data types. **


**The term data structure refers to a data collection with well-defined
     operations and behavior or properties. **



Other sample Answers from Mentor:

I'll be answering the shortVideo_practice_review.interview question:

What is static and what's different between static and non static members?
So in Java a static member is a member of a class that isn't associated with the instance of the class. Instead this member belongs to the
class itself and as a result we can access the static member without first creating an object of the class.
There are two type of static members. And these are static fields and static methods, so the static field is being
declared with the static keyword like private, static and age, and the value of this static field is the same across
all the instances of the class. In other words, if a class has a static field name, company name,
all objects created from that class will have the same name value for this company name. So static fields are created.

Initialize it when the first class when the class is first loaded, and this happens when a static member of the class
is being referred to, where when a class is referred to where on the instance of the class is created, whichever is
coming first, so another static member is the static method. A static method is being created also by using the
static keyword. And and the same as static fields, the static methods are associated with the class itself,not with
any particular objects created from the class. And as a result of that, we don't have to create an object from a
class before we can use a static method. So the best known static method is the main method, which is called by
Java runtime to start an application. The main method must be static, which means that the application runs in a
static context by default. So one of the basic rule when working with the static method is that you can't access a
non static method or field from a static method. Because the static method doesn't have an instance of the class to use
to reference to an instance method word field. Thank you.








